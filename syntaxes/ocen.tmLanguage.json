{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ocen",
  "fileTypes": ["ocen"],
  "patterns": [
    {
      "include": "#function"
    },
    {
      "include": "#struct"
    },
    {
      "include": "#variable-declaration"
    },
    {
      "include": "#expressions"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "expressions": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#this"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "include": "#control"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#indexing"
        },
        {
          "include": "#call"
        },
        {
          "include": "#variable-declaration"
        },
        {
          "include": "#types"
        },
        {
          "name": "meta.block.ocen",
          "begin": "(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.brace.ocen"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.brace.ocen"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "keyword.operator.other.ocen",
          "match": "(\\+|\\-|\\*|\\/|\\%|\\=|\\!|\\<|\\>|\\&|\\~|\\|)"
        }
      ]
    },
    "this": {
      "name": "variable.language.this.ocen",
      "match": "\\bthis\\b"
    },
    "variable-declaration": {
      "name": "meta.variable.definition.ocen",
      "comment": "FIXME: The identifier matching is identical to the lexer but more characters may be allowed in the future.",
      "begin": "\\b(let|const)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)?",
      "beginCaptures": {
        "1": {
          "name": "keyword.let.ocen"
        },
        "2": {
          "name": "variable.other.ocen"
        },
        "3": {
          "name": "punctuation.colon.ocen"
        }
      },
      "end": "((?:\\+|\\-|\\*|\\/|%)?=)|\\n",
      "endCaptures": {
        "1": {
          "name": "keyword.operator.assignment.ocen"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "struct": {
      "patterns": [
        {
          "name": "meta.type.struct.ocen",
          "match": "\\b(union|struct)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)\\s+\\b",
          "captures": {
            "1": {
              "name": "keyword.type.struct.ocen"
            },
            "2": {
              "name": "entity.name.type.struct.ocen"
            },
            "3": {
              "name": "storage.modifier.linkage.ocen"
            }
          }
        },
        {
          "name": "meta.block.struct.ocen",
          "begin": "(?<=(?:union|struct).*?)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.brace.ocen"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.brace.ocen"
            }
          },
          "patterns": [
            {
              "include": "#field"
            },
            {
              "include": "$self"
            },
            {
              "include": "#comment"
            }
          ]
        },
        {
          "name": "meta.type.generic-arguments.ocen",
          "begin": "(?<=(?:union|struct|enum).*?)\\s*(<)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.angle-bracket.ocen"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.angle-bracket.ocen"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "meta.type.enum.body.ocen",
          "begin": "(?<=\\benum\\b.*?)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.brace.ocen"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.brace.ocen"
            }
          },
          "patterns": [
            {
              "include": "#enum-field"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.type.enum.ocen",
          "match": "\\b(enum)\\s+((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(?:(:)\\s*((?:[ui](?:8|16|32|64))))?",
          "captures": {
            "1": {
              "name": "keyword.type.enum.ocen"
            },
            "2": {
              "name": "entity.name.type.enum.ocen"
            },
            "3": {
              "name": "punctuation.colon.ocen"
            },
            "4": {
              "name": "storage.type.numeric.ocen"
            },
            "5": {
              "name": "punctuation.begin.brace.ocen"
            }
          }
        }
      ]
    },
    "field": {
      "name": "meta.field.ocen",
      "begin": "((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)",
      "beginCaptures": {
        "1": {
          "name": "variable.field.ocen"
        },
        "2": {
          "name": "punctuation.colon.ocen"
        }
      },
      "end": "$",
      "patterns": [
        {
          "include": "#types"
        },
        {
          "include": "$self"
        }
      ]
    },
    "enum-field": {
      "patterns": [
        {
          "name": "meta.field.assigned.enum.ocen",
          "match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(=)",
          "captures": {
            "1": {
              "name": "constant.language.ocen"
            },
            "2": {
              "name": "keyword.operator.assignment.ocen"
            }
          },
          "patterns": [
            {
              "include": "#number"
            }
          ]
        },
        {
          "include": "#field"
        },
        {
          "name": "meta.field.enum.ocen",
          "match": "(?<!\\)\\s*)(?<!\\=\\s*)\\b((?:\\w|_)(?:\\w|_|[0-9])*)(?:\\s*$|\\s*\\(|\\,)",
          "captures": {
            "1": {
              "name": "constant.language.ocen"
            }
          }
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.ocen",
          "match": "\\b(str|i8|fn|i16|i32|i64|u8|u16|u32|u64|f32|f64|bool|char|untyped_ptr)\\b"
        },
        {
          "match": "\\b(?:[A-Z]|_)(?:\\w|_|[0-9])*\\s*(::)",
          "captures": {
            "1": {
              "name": "storage.type.primitive.ocen"
            },
            "2": {
              "name": "punctuation.double-colon.ocen"
            }
          }
        },
        {
          "name": "storage.type.generic.ocen",
          "begin": "\\b((?:[A-Z]|_)(?:\\w|_|[0-9])*)\\s*(<)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.other.ocen"
            },
            "2": {
              "name": "punctuation.begin.angle-bracket.ocen"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.angle-bracket.ocen"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "storage.type.other.ocen",
          "match": "\\b(?:[A-Z]|_)(?:\\w|_|[0-9])*\\b"
        },
        {
          "name": "storage.type.array.ocen",
          "begin": "(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.square-bracket.ocen"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.square-bracket.ocen"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "keyword.operator.address.ocen",
          "match": "\\&"
        },
        {
          "name": "punctuation.comma.generic-type-list.ocen",
          "match": ","
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "name": "meta.function.declaration.ocen",
          "match": "\\b((?:def)\\b)",
          "captures": {
            "1": {
              "name": "keyword.function.ocen"
            }
          }
        },
        {
          "name": "meta.function.argument-list.ocen",
          "begin": "\\b(?<=(?:def).*?)(\\()",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.bracket"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.bracket"
            }
          },
          "patterns": [
            {
              "include": "#argument-list"
            }
          ]
        },
        {
          "name": "meta.function.body.ocen",
          "begin": "\\b(?<=(?:def).*?)(\\{)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.brace.ocen"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.brace.ocen"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        }
      ]
    },
    "argument-list": {
      "patterns": [
        {
          "include": "#this"
        },
        {
          "name": "meta.argument.ocen",
          "begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)",
          "beginCaptures": {
            "1": {
              "name": "variable.parameter.ocen"
            },
            "2": {
              "name": "punctuation.colon.ocen"
            }
          },
          "end": "$|(,)|(?:(?=\\)))",
          "endCaptures": {
            "1": {
              "name": "punctuation.comma.ocen"
            }
          },
          "patterns": [
            {
              "include": "#types"
            }
          ]
        },
        {
          "name": "punctuation.comma.ocen",
          "match": ","
        }
      ]
    },
    "parameter-list": {
      "patterns": [
        {
          "name": "meta.parameter.ocen",
          "begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(:)(?!\\:)",
          "beginCaptures": {
            "1": {
              "name": "variable.parameter.name.ocen"
            },
            "2": {
              "name": "punctuation.colon.ocen"
            }
          },
          "end": "$|(,)|(?=\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.comma.ocen"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "punctuation.comma.ocen",
          "match": ","
        },
        {
          "include": "$self"
        }
      ]
    },
    "match-patterns": {
      "patterns": [
        {
          "name": "meta.pattern.enum.ocen",
          "match": "\\b((?:[A-Z]|_)(?:\\w|_|[0-9])*)(::)",
          "captures": {
            "1": {
              "name": "storage.type.primitive.ocen"
            },
            "2": {
              "name": "punctuation.double-colon.ocen"
            }
          }
        },
        {
          "name": "meta.pattern.enum.variant.ocen",
          "match": "\\b((?:[A-Z]|_)(?:\\w|_|[0-9])*)\\b",
          "captures": {
            "1": {
              "name": "constant.language.ocen"
            }
          }
        },
        {
          "begin": "(\\=\\>)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.fat-arrow.ocen"
            }
          },
          "end": "$",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "match": "(\\|)",
          "captures": {
            "0": {
              "name": "keyword.operator.or.ocen"
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    "indexing": {
      "patterns": [
        {
          "name": "meta.index.struct.ocen",
          "match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(\\.)",
          "captures": {
            "1": {
              "name": "variable.other.ocen"
            },
            "2": {
              "name": "punctuation.period.ocen"
            }
          }
        },
        {
          "name": "meta.index.namespace.ocen",
          "match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(::)\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\b(?!\\()",
          "captures": {
            "1": {
              "name": "storage.type.primitive.ocen"
            },
            "2": {
              "name": "punctuation.double-colon.ocen"
            },
            "3": {
              "name": "constant.language.ocen"
            }
          }
        },
        {
          "name": "meta.index.namespace.ocen",
          "match": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(::)",
          "captures": {
            "1": {
              "name": "storage.type.primitive.ocen"
            },
            "2": {
              "name": "punctuation.double-colon.ocen"
            }
          }
        },
        {
          "name": "meta.index.array.ocen",
          "begin": "(\\[)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.square-bracket.ocen"
            }
          },
          "end": "(\\])",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.square-bracket.ocen"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.index.other.ocen",
          "match": "(\\.)",
          "captures": {
            "1": {
              "name": "punctuation.period.ocen"
            }
          }
        }
      ]
    },
    "call": {
      "name": "meta.call.ocen",
      "begin": "\\b((?:\\w|_)(?:\\w|_|[0-9])*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.call.ocen"
        },
        "2": {
          "name": "punctuation.begin.bracket.ocen"
        }
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.end.bracket.ocen"
        }
      },
      "patterns": [
        {
          "include": "#parameter-list"
        }
      ]
    },
    "control": {
      "patterns": [
        {
          "name": "meta.control.ocen",
          "match": "\\b(if|then|else|while|for|defer|match|assert)\\b(?=.*?(?:\\{|$))",
          "captures": {
            "1": {
              "name": "keyword.control.block.ocen"
            }
          }
        },
        {
          "name": "keyword.control.ocen",
          "match": "\\b(return|continue|break|yield)\\b"
        },
        {
          "name": "keyword.builtin.ocen",
          "match": "\\b(namespace|struct|union|typedef)\\b"
        },
        {
          "name": "keyword.control.other.ocen",
          "match": "\\b(as)\\b\\s"
        },
        {
          "name": "keyword.control.extern.ocen",
          "begin": "\\b(extern)(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.extern.ocen"
            },
            "2": {
              "name": "punctuation.begin.paren.ocen"
            }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.paren.ocen"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "keyword.control.extern.ocen",
          "match": "\\b(extern)\\b"
        },
        {
          "name": "keyword.control.exits.ocen",
          "match": "\\b(?<=def.*)exits\\b"
        },
        {
          "name": "keyword.control.other.ocen",
          "match": "\\b(import)\\b"
        },
        {
          "name": "keyword.control.other.ocen",
          "match": "@compiler\\b"
        },
        {
          "name": "meta.control.match.ocen",
          "begin": "(?<=match.*?)(\\{)",
          "beginCaptures": {
            "2": {
              "name": "punctuation.begin.brace.ocen"
            }
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.brace.ocen"
            }
          },
          "patterns": [
            {
              "include": "#match-patterns"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.logic.ocen",
          "match": "\\b(not|and|or)\\b"
        },
        {
          "name": "keyword.operator.arithmetic.ocen",
          "match": "(\\+|\\-|\\*|\\/|\\^|\\~|\\%)(=)?"
        },
        {
          "name": "keyword.operator.comparison.ocen",
          "match": "(((=|>|<)(=)?)|!=)"
        },
        {
          "name": "keyword.operator.cast.ocen",
          "match": "\\b(as)(\\!|\\?)"
        },
        {
          "name": "punctuation.semicolon.ocen",
          "match": ";"
        },
        {
          "name": "keyword.operator.isnull.ocen",
          "match": "\\?"
        },
        {
          "name": "punctuation.colon.ocen",
          "match": "\\:"
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.ocen"
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric.hex.ocen",
          "match": "\\b(?<!\\$)0(?:x)[0-9a-fA-F][0-9a-fA-F_]*(n|(?:[ui](?:8|16|32|64)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.ocen"
            }
          }
        },
        {
          "name": "constant.numeric.binary.ocen",
          "match": "\\b(?<!\\$)0(?:b)[01][01_]*(n|(?:[ui](?:8|16|32|64)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.ocen"
            }
          }
        },
        {
          "name": "constant.numeric.float.ocen",
          "match": "\\b(?<!\\$|\\.)[0-9](?:[0-9]|_)*((?:[f](?:32|64)))\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.ocen"
            }
          }
        },
        {
          "name": "constant.numeric.float.ocen",
          "match": "\\b(?<!\\$|\\.)[0-9](?:[0-9]|_)*(?:\\.)(?:[0-9]|_)*((?:[f](?:32|64)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.ocen"
            }
          }
        },
        {
          "name": "constant.numeric.ocen",
          "match": "\\b(?<!\\$)[0-9][0-9_]*(n|(?:[ui](?:8|16|32|64)))?\\b(?!\\$)",
          "captures": {
            "1": {
              "name": "storage.type.numeric.ocen"
            }
          }
        }
      ],
      "name": "constant.numeric.ocen"
    },
    "comment": {
      "patterns": [
        {
          "begin": "(//)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.ocen"
            }
          },
          "end": "$",
          "name": "comment.line.double-slash.ocen"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ocen",
          "begin": "(\")",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.quote.double.ocen"
            }
          },
          "end": "(\")",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.quote.double.ocen"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.ocen",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ocen",
          "begin": "(')",
          "beginCaptures": {
            "1": {
              "name": "punctuation.begin.quote.single.ocen"
            }
          },
          "end": "(')",
          "endCaptures": {
            "1": {
              "name": "punctuation.end.quote.single.ocen"
            }
          },
          "patterns": [
            {
              "name": "constant.character.escape.ocen",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.format.ocen",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape.secor",
              "match": "\\\\."
            },
            {
              "name": "variable.other.ocen",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "keyword.operator.begin.brace.ocen"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "keyword.operator.end.brace.ocen"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        },
        {
          "name": "string.format.ocen",
          "begin": "f\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.secor",
              "match": "\\\\."
            },
            {
              "name": "variable.other.ocen",
              "begin": "\\{",
              "beginCaptures": {
                "0": {
                  "name": "keyword.operator.begin.brace.ocen"
                }
              },
              "end": "\\}",
              "endCaptures": {
                "0": {
                  "name": "keyword.operator.end.brace.ocen"
                }
              },
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.ocen"
}
